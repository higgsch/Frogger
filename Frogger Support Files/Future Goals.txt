v1.0: Basic FROGGER.
v1.1 & 1.2: Added retrieve() command and obfuscator.
v2.0: Added conditional statements.
v2.1: Added modulus and integer division, rootation, and exponentiation.
v2.2: Added random() functionality.
v2.3: Added string assignment and concatenation, variable typing dbl vs string
v2.4: Added string indexing (<string>:asciiAt(dbl)), string parsing (<string>:parseDouble()),
	double conversions (<double>:toString(), <double>:toAscii())
v2.5: Consolidate S/D/A functions (retrieveString, retrieveDouble), obfuscation for function names
v3.0: Refactored with cleaner code.
v3.1: Added line numbers to errors throughout.
v3.2: Added File I/O: openI, openO, read, write, closeI, closeO routines
v3.3: Added commandline argument and string length functionality.
v4.0: Added user-defined functions (force modulation into different files).
v4.1: Added Test Framework.

v4.2: Refactor with cleaner code.
v5.0: Add function overloading.
      Perhaps numToMonth(num=double)~string.fgr
v5+: Add object orientation (folder modulation).
v5+.2: Add asciiFunction config file functionality.
v5++: Write a Frogger compiler in Frogger. (Silently screams in agony...)

Notes---
refactor

refactor: vector should only be used in inheritance (e.g. ArgList instead of vector<argPair *>)
refactor: combine parallels (e.g. ProgramAST and ProgramStruct)
refactor: operator= for OutputText

add security checks for functions
decide to add write(<double>) or remove display(<double>)

refactor compiler-driver.
instanciate vectors in constructors (e.g. Command in Records.cpp)

refactor: Line or Stmt, Number -> Index or Count
refactor: obfuscator inheret from ifstream and use polymorphism in scanner
refactor: check use of "Magic Numbers"

test polymorphism, delete, and destructor
pull out null checks into a function, pair new and delete keywords

Add printing for cmd and funct
change tabs to spaces in accept()

check asciiSummation phase.
